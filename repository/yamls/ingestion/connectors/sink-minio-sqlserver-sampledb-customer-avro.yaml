apiVersion: "kafka.strimzi.io/v1beta2"
kind: "KafkaConnector"
metadata:
  # connector name
  name: "sink-minio-sqlserver-sampledb-customer-avro-8a8a32d1"
  labels:
    # kafka connect [cluster] name
    strimzi.io/cluster: edh
spec:
  class: io.confluent.connect.s3.S3SinkConnector
  tasksMax: 1
  config:
    key.converter: "io.confluent.connect.avro.AvroConverter"
    key.converter.schema.registry.url: "http://schema-registry-cp-schema-registry:8081"
    value.converter: "io.confluent.connect.avro.AvroConverter"
    value.converter.schema.registry.url: "http://schema-registry-cp-schema-registry:8081"
    topics: "src-sqlserver-jdbc-sampledb-custumer-avro"
    s3.bucket.name: "kafka"
    topics.dir: "streams-jdbc"
    s3.part.size: 5242880
    flush.size: 500
    rotate.schedule.interval.ms: 54000
    store.url: "http://minio.deepstorage.svc.cluster.local"
    aws.access.key.id: "fikkgwHUG0LQjiCv"
    aws.secret.access.key: "6I1bwdteAZX4WXHmGWTDditWwAJvO1v9"
    storage.class: "io.confluent.connect.s3.storage.S3Storage"
    format.class: "io.confluent.connect.s3.format.parquet.ParquetFormat"
    enhanced.avro.schema.support: True
    schema.generator.class: "io.confluent.connect.storage.hive.schema.DefaultSchemaGenerator"
    partitioner.class: "io.confluent.connect.storage.partitioner.TimeBasedPartitioner"
    path.format: "YYYY/MM/dd/HH"
    locale: "pt_BR"
    timezone: "America/Sao_Paulo"
    partition.duration.ms: 18000
    timestamp.extractor: "Record"
    s3.part.retries: 10
    s3.retry.backoff.ms: 900
